@startuml
'https://plantuml.com/class-diagram

hide circle
skinparam classAttributeIconSize 0

class PlaceOrderView {
}

class PlaceOrderController {
    +createOrder(date orderDate , string orderType, string orderStatus, double cashProposal): void
    +submitOrder(): Result
}

class Client {
  -name
  -citizenCardNumber
  -taxIdNumber
  -email
  -phoneNumber
    +getOrderService(): OrderService
}

class PlaceOrderService {
    +PlaceOrderService(OrderRepository ordersRepo)
    +create(date orderDate , string orderType, string orderStatus, double cashProposal): Order
    +addOrUpdate(Order obj): Result
}

interface OrderRepository <<interface>> {
    +save(Order obj): Result
}

interface RepositoryFactory <<interface>> {
    +getOrdersRepository(): OrderRepository
}

class Order {
    -orderDate
    -orderType
    -orderStatus
    -cashProposal
    Order(date orderDate , string orderType, string orderStatus, double cashProposal)
    +getOrderDate():date
    +getOrderType(): string
    +getOrderStatus(): string
    +getCashProposal(): double
    +getListing(): Listing

}

class Listing {
    -publishDate
    -businessType
    -commission
    -status
     Listing(date publishDate, string businessType,
 double commission,string status)
}

Client "1" -down-> "1" RepositoryFactory: uses
OrderRepository "1" -right-> "0..*" Order: records

PlaceOrderView ..> PlaceOrderController
PlaceOrderController ..> Client
PlaceOrderController ..> PlaceOrderService
PlaceOrderService ..> OrderRepository
PlaceOrderService ..> Order
PlaceOrderController ..> Order
Order --> Listing

Client -> PlaceOrderService: adopts
RepositoryFactory .right.> OrderRepository

class OrderMemoryRepository {
    +save(Order obj): Result
}

class MemoryRepositoryFactory {
    +getOrdersRepository(): OrderRepository
}

OrderMemoryRepository .up.|> OrderRepository
MemoryRepositoryFactory .up.|> RepositoryFactory

MemoryRepositoryFactory .right.> OrderMemoryRepository
@enduml